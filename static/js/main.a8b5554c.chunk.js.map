{"version":3,"sources":["sideNav.js","App.js","serviceWorker.js","index.js"],"names":["sideNav","state","visible","showDrawer","setState","onClose","redirect","e","preventDefault","props","history","push","target","pathname","style","position","top","right","type","color","fontSize","onClick","this","title","placement","closable","to","Component","withRouter","About","Users","App","className","Navbar","bg","variant","Brand","href","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAWMA,E,2MACJC,MAAQ,CAAEC,SAAS,G,EAEnBC,WAAa,WACX,EAAKC,SAAS,CACZF,SAAS,K,EAIbG,QAAU,WACR,EAAKD,SAAS,CACZF,SAAS,K,EAIbI,SAAW,SAAAC,GACTA,EAAEC,iBACF,EAAKC,MAAMC,QAAQC,KAAKJ,EAAEK,OAAOC,UACjC,EAAKR,W,wEAIL,OACE,yBACES,MAAO,CACLC,SAAU,WACVC,IAAK,OACLC,MAAO,SAGT,kBAAC,IAAD,CACEC,KAAK,OACLJ,MAAO,CACLK,MAAO,QACPC,SAAU,OACVL,SAAU,WACVC,IAAK,OAEPK,QAASC,KAAKnB,aAEhB,kBAAC,IAAD,CACEoB,MAAM,eACNC,UAAU,QACVC,UAAU,EACVpB,QAASiB,KAAKjB,QACdH,QAASoB,KAAKrB,MAAMC,SAEpB,kBAAC,IAAD,KACE,6BACE,6BACE,kBAAC,IAAD,CAAMwB,GAAG,IAAIL,QAASC,KAAKhB,UAA3B,SAKF,6BACE,kBAAC,IAAD,CAAMoB,GAAG,SAASL,QAASC,KAAKhB,UAAhC,UAKF,6BACE,kBAAC,IAAD,CAAMoB,GAAG,SAASL,QAASC,KAAKhB,UAAhC,kB,GA9DMqB,aA0EPC,cAAW5B,GC7EnB,SAAS6B,IACd,OAAO,qCAGF,SAASC,IACd,OACE,oCACO,kBAAC,IAAD,CAAMJ,GAAI,UAAV,S,IAoCIK,E,iLA9BX,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACjB,kBAAC,IAAD,CACEnB,KAAK,OACLJ,MAAO,CACLK,MAAO,QACPC,SAAU,OACVL,SAAU,WACVC,IAAK,UAGR,GAVH,wBAaA,kBAAC,EAAD,OAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,SAASC,UAAWX,IACtC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,SAASC,UAAWV,W,GAxBhCW,IAAMd,WCPJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a8b5554c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Drawer, Button, Icon } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\n\nclass sideNav extends Component {\n  state = { visible: false };\n\n  showDrawer = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  redirect = e => {\n    e.preventDefault();\n    this.props.history.push(e.target.pathname);\n    this.onClose();\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\"\n        }}\n      >\n        <Icon\n          type=\"menu\"\n          style={{\n            color: \"white\",\n            fontSize: \"30px\",\n            position: \"relative\",\n            top: \"5px\"\n          }}\n          onClick={this.showDrawer}\n        />\n        <Drawer\n          title=\"Basic Drawer\"\n          placement=\"right\"\n          closable={false}\n          onClose={this.onClose}\n          visible={this.state.visible}\n        >\n          <Router>\n            <div>\n              <div>\n                <Link to=\"/\" onClick={this.redirect}>\n                  Home\n                </Link>\n              </div>\n\n              <div>\n                <Link to=\"/about\" onClick={this.redirect}>\n                  About\n                </Link>\n              </div>\n\n              <div>\n                <Link to=\"/users\" onClick={this.redirect}>\n                  Users\n                </Link>\n              </div>\n            </div>\n          </Router>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(sideNav);\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Icon } from \"antd\";\nimport SideNav from \"./sideNav\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nexport function About() {\n  return <h1>About</h1>;\n}\n\nexport function Users() {\n  return (\n    <h1>\n      Users<Link to={\"/about\"}>home</Link>\n    </h1>\n  );\n}\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">\n              <Icon\n                type=\"user\"\n                style={{\n                  color: \"white\",\n                  fontSize: \"30px\",\n                  position: \"relative\",\n                  top: \"-5px\"\n                }}\n              />\n              {\"\"}\n              &nbsp; React Bootstrap\n            </Navbar.Brand>\n            <SideNav />\n          </Navbar>\n\n          <Switch>\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/users\" component={Users} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}